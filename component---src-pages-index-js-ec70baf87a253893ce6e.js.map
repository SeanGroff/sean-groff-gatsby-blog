{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/pages/index.js"],"names":["SEO","memo","description","title","htmlAttributes","lang","meta","name","content","link","rel","type","href","BlogIndex","data","location","React","useLayoutEffect","twttr","widgets","load","getEmojisCount","useCallback","timeToRead","siteTitle","site","siteMetadata","siteDescription","posts","allMarkdownRemark","edges","Layout","Bio","map","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","paddingRight","date","Array","from","_","index","role","aria-label","dangerouslySetInnerHTML","__html","excerpt","pageQuery"],"mappings":"oOAoBeA,EAhBHC,gBAAK,YAA6B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC/B,OACE,YAAC,IAAD,CACEC,eAAgB,CAAEC,KAAM,MACxBC,KAAM,CAAC,CAAEC,KAAM,cAAeC,QAASN,IACvCC,MAAOA,EACPM,KAAM,CAAC,CAAEC,IAAK,gBAAiBC,KAAM,YAAaC,KAAM,qB,8EC0D/CC,UA5Df,YAAiD,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,U,2HAAqB,wBAC9CC,IAAMC,iBAAgB,WAChBC,OAASA,MAAMC,SACjBD,MAAMC,QAAQC,SAEf,IAEH,IAAMC,EAAiBL,IAAMM,aAAY,SAAAC,GACvC,QAAQ,GACN,KAAKA,GAAc,GACjB,OAAO,EACT,KAAKA,GAAc,GACjB,OAAO,EACT,KAAKA,GAAc,GACjB,OAAO,EACT,KAAKA,GAAc,EACjB,OAAO,EACT,QACE,OAAO,KAEV,IAEGC,EAAYV,EAAKW,KAAKC,aAAavB,MACnCwB,EAAkBb,EAAKW,KAAKC,aAAaxB,YACzC0B,EAAQd,EAAKe,kBAAkBC,MAErC,OACE,YAACC,EAAA,EAAD,CAAQhB,SAAUA,EAAUZ,MAAM,cAChC,YAAC,EAAD,CAAKD,YAAayB,EAAiBxB,MAAOqB,IAC1C,YAACQ,EAAA,EAAD,MACCJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACN/B,EAAQ+B,EAAKC,YAAYhC,OAAS+B,EAAKE,OAAOC,KACpD,OACE,mBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,kBAAIE,MAAO,CAAEC,aAAcC,YAAO,OAChC,YAAC,OAAD,CAAMF,MAAO,CAAEG,UAAW,QAAUC,GAAIT,EAAKE,OAAOC,MACjDlC,IAGL,qBAAOoC,MAAO,CAAEK,aAAc,QAC3BV,EAAKC,YAAYU,MAEpB,wBACGC,MAAMC,KACLD,MAAMzB,EAAea,EAAKX,cAC1B,SAACyB,EAAGC,GAAJ,OACE,oBAAMX,IAAKW,EAAOC,KAAK,MAAMC,aAAW,eAAxC,UAMN,iBAAGC,wBAAyB,CAAEC,OAAQnB,EAAKoB,iBAQxCzC,IAEF0C,EAAS","file":"component---src-pages-index-js-ec70baf87a253893ce6e.js","sourcesContent":["import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\n\nconst SEO = memo(({ description, title }) => {\n  return (\n    <Helmet\n      htmlAttributes={{ lang: 'en' }}\n      meta={[{ name: 'description', content: description }]}\n      title={title}\n      link={[{ rel: 'shortcut icon', type: 'image/png', href: 'favicon.ico' }]}\n    />\n  )\n})\n\nSEO.propTypes = {\n  description: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport SEO from '../components/SEO'\nimport Bio from '../components/Bio'\nimport Layout from '../components/Layout'\nimport { rhythm } from '../utils/typography'\n\nfunction BlogIndex({ data, location, ...rest }) {\n  React.useLayoutEffect(() => {\n    if (twttr && twttr.widgets) {\n      twttr.widgets.load()\n    }\n  }, [])\n\n  const getEmojisCount = React.useCallback(timeToRead => {\n    switch (true) {\n      case timeToRead >= 20:\n        return 5\n      case timeToRead >= 15:\n        return 4\n      case timeToRead >= 10:\n        return 3\n      case timeToRead >= 5:\n        return 2\n      default:\n        return 1\n    }\n  }, [])\n\n  const siteTitle = data.site.siteMetadata.title\n  const siteDescription = data.site.siteMetadata.description\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title=\"Sean Groff\">\n      <SEO description={siteDescription} title={siteTitle} />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <div key={node.fields.slug}>\n            <h3 style={{ marginBottom: rhythm(1 / 4) }}>\n              <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                {title}\n              </Link>\n            </h3>\n            <small style={{ paddingRight: '4px' }}>\n              {node.frontmatter.date}\n            </small>\n            <span>\n              {Array.from(\n                Array(getEmojisCount(node.timeToRead)),\n                (_, index) => (\n                  <span key={index} role=\"img\" aria-label=\"nerdy emoji\">\n                    ðŸ¤“\n                  </span>\n                )\n              )}\n            </span>\n            <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n          </div>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}