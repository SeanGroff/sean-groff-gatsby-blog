{"componentChunkName":"component---src-templates-blog-post-js","path":"/rn-animations/","result":{"data":{"site":{"siteMetadata":{"title":"Sean Groff | Web Developer creating awesome content for JavaScript and React","author":"Sean Groff"}},"mdx":{"id":"56352c57-dbc7-51e1-9b08-9b37f229d505","excerpt":"What are Animations in React Native? Animation  can be defined as manipulating images or objects to appear as moving images or objectsâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Get Started with React Native Animations\",\n  \"date\": \"2018-08-29\",\n  \"categories\": \"react\",\n  \"tags\": [\"react\", \"react-native\", \"animations\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"What are Animations in React Native?\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Animation\"), \" can be defined as manipulating images or objects to appear as moving images or objects.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u201CAnimations allow you to convey physically believable motion in your interface\\u201D -\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/animations\"\n  }), \"React Native Docs\"), \".\")), mdx(\"p\", null, \"Animation on mobile creates an intuitive human User Interface. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.smashingmagazine.com/2017/01/how-functional-animation-helps-improve-user-experience/\"\n  }), \"Smashing Magazine\"), \" has a fantastic article on the importance of animation for mobile devices. In this article we will cover how to get started using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/animated\"\n  }), \"Animated\"), \" animation system provided by React Native.\"), mdx(\"h3\", null, \"Local Setup\"), mdx(\"p\", null, \"None!\"), mdx(\"p\", null, \"For this article we\\u2019ll do all of our code and device emulation from the browser thanks to Expo and their amazing Snack tool. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://snack.expo.io/\"\n  }), \"Expo Snack\"), \" is React Native in the browser. The Snack tool provides a text editor and side-by-side phone emulator for Android and iOS!\"), mdx(\"h3\", null, \"Getting started with Animated\"), mdx(\"p\", null, \"There are three required values to every animation we define using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/animated\"\n  }), \"Animated\"), \" library.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Define the starting value or location of the animation in reference to the exact X, Y coordinates on the screen.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Define the end value or ending location of the animation.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Define which element we are animating.\"))), mdx(\"p\", null, \"Below is a very basic demo I built to animate a tennis ball. When you tap the tennis ball it \\u201Csprings\\u201D upwards.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/1600/1*t4l4X2Kt8lioiIYEjz6nrw.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Fire up your own Expo Snack at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://snack.expo.io/\"\n  }), \"snack.expo.io\"), \". Type out the code you see from my demo until it works. Don\\u2019t worry, if none of it makes sense yet.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://snack.expo.io/@sgroff04/animated-tennis-ball\"\n  }), \"Tennis Ball Spring Animation Example\")), mdx(\"h3\", null, \"Three Required Values\"), mdx(\"p\", null, \"Let\\u2019s break the Tennis Ball Animation down to the three values we must define. When creating an animation it\\u2019s easy to get overwhelmed. To help simplify the process I like to break animations into three parts. Breaking the problem down into smaller more approachable parts is what programmers like to call decomposition.\"), mdx(\"h3\", null, \"One\"), mdx(\"p\", null, \"Define the starting value or the starting location of the animation in reference to the exact X, Y coordinates on the screen.\"), mdx(\"p\", null, \"In the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Class Constructor\"), \" method we created a new Animated instance. We set the starting location to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"x: 10, y: 450\"), \". The X, Y coordinates always start at the top-left corner of the screen.\"), mdx(\"p\", null, \"The X, Y coordinates \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0,0\"), \" would be the top-left corner of the screen.\"), mdx(\"p\", null, \"This means our starting location is 10 pixels to the right, from the top-left corner of the screen. Along the Y axis is 450 pixels down from the top of the screen. This starts the tennis ball near the bottom left corner of the screen.\"), mdx(\"p\", null, \"Change the X and Y values to different numbers and pay attention to what happens. What happens when you change the X, Y values to 0, 0?\"), mdx(\"p\", null, \"As you probably now understand:\"), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"this.moveAnimation = new Animated.ValueXY({ x: 10, y: 450 })\")), mdx(\"p\", null, \"Creates a new animation instance with a starting location \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"10, 450\"), \" along the X, Y axis of the screen.\"), mdx(\"h3\", null, \"Two\"), mdx(\"p\", null, \"Define the end value or ending location of the animation.\"), mdx(\"p\", null, \"Take a look at the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"_moveBall method\"), \". You can probably figure out the ending location is the object provided as the 2nd parameter to the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Animated.spring\"), \" method.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-js\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  toValue\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" x\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"250\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" y\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"10\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\")))), mdx(\"p\", null, \"We are telling the app to move to the X, Y value 250, 10 which is near the top-right corner of the screen.\"), mdx(\"p\", null, \"250 pixels to the right from the left side of the screen. 10 pixels down from the top of the screen.\"), mdx(\"p\", null, \"Animated has \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/0.56/animated#configuring-animations\"\n  }), \"three built in types\"), \" we can use to get from our starting location or value to our ending location or value.\"), mdx(\"p\", null, \"For the Tennis Ball app we\\u2019re using the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Spring method\"), \" which provides a smooth spring like animation with a little bounce at the end.\"), mdx(\"p\", null, \"To use the Spring method we need to pass the instance of our animation as the first parameter, then our object defining the end value.\"), mdx(\"p\", null, \"To start or fire the animation method \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Spring\"), \" we simply call it\\u2019s built in method \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".start()\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-js\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Animated\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"spring\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"this\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"moveAnimation\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  toValue\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" x\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"250\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" y\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"10\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\")))), mdx(\"h3\", null, \"Three\"), mdx(\"p\", null, \"Define which element we are animating.\"), mdx(\"p\", null, \"React Native provides 4 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/0.56/animated#animatable-components\"\n  }), \"\\u201Canimatable\\u201D components\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Animated.Image\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Animated.ScrollView\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Animated.Text\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Animated.View\"))), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/0.56/animated#createanimatedcomponent\"\n  }), \"createAnimatedComponent()\"), \" can be used to make a component animatable.\"), mdx(\"p\", null, \"With this knowledge we should now be able to identify what element we are animating. Notice the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Animated.View\"), \" component has some inline styles defined. \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"this.moveAnimation.getLayout()\"), \" converts the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"{x, y}\"), \"values into \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"{left, top}\"), \" for use in the style \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"prop\"), \". This works similar to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/position\"\n  }), \"absolute positioning\"), \" on the web.\"), mdx(\"p\", null, \"We\\u2019ve essentially instructed the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Animated.View\"), \" component to always be at the position \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Linear_interpolation\"\n  }), \"interpolated\"), \" by the animation.\"), mdx(\"h3\", null, \"Main Takeaway\"), mdx(\"p\", null, \"Remember the three values to define every time you create an animation in React Native. This is a fundamental building block you\\u2019ll be able to use for the simplest animations all the way up to the most complex animations. I\\u2019ve intentionally kept the article short to focus on this fundamental approach to building animations.\"), mdx(\"h3\", null, \"Hammer Home\"), mdx(\"p\", null, \"To hammer home what we\\u2019ve learned I\\u2019ve created two more Expo Snack Examples. I want you to code and play with these on your own time. When coding these two Expo Snacks, identify the three values you must define to create these animations. Keep the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/0.56/animated\"\n  }), \"React Native docs\"), \" handy for reference!\"), mdx(\"h3\", null, \"Examples\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://snack.expo.io/@sgroff04/animated-fade-in\"\n  }), \"Fade In Animation Example\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://snack.expo.io/@sgroff04/animated-spinner\"\n  }), \"Loading Spinner Animation\")), mdx(\"p\", null, \"After you\\u2019re finished, create the animation you\\u2019ve been wanting to create!\"), mdx(\"p\", null, \"Enjoy!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Get Started with React Native Animations","date":"August 29, 2018","featuredImage":null}}},"pageContext":{"slug":"/rn-animations/","previous":{"fields":{"slug":"/react-refs/"},"frontmatter":{"title":"Introduction to Refs in React 16.3"}},"next":{"fields":{"slug":"/useReducer/"},"frontmatter":{"title":"The Approachable Guide to useReducer"}}}}}