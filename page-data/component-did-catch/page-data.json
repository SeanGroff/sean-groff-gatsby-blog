{"componentChunkName":"component---src-templates-blog-post-js","path":"/component-did-catch/","result":{"data":{"site":{"siteMetadata":{"title":"Sean Groff | Web Developer creating awesome content for JavaScript and React","author":"Sean Groff"}},"mdx":{"id":"363913b4-893f-55ad-a4f4-fbef529b9191","excerpt":"What are Error Boundaries? \"Error boundaries are React components that  catch JavaScript errors anywhere in their child component tree, logâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"2 Minutes to Learn React 16's componentDidCatch Lifecycle Method\",\n  \"date\": \"2017-09-12\",\n  \"categories\": \"react\",\n  \"tags\": [\"react\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"What are Error Boundaries?\"), mdx(\"p\", null, \"\\u201CError boundaries are React components that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI\"), \" instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.\\u201D -\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html#introducing-error-boundaries\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Dan Abramov\"))), mdx(\"p\", null, \"In React, you create an error boundary with a lifecycle method called \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"componentDidCatch\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-js\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ErrorBoundary\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"React\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"Component\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"componentDidCatch\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token parameter\"\n  }), \"error\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" errorInfo\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// Catch errors in any child components\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\")))), mdx(\"h3\", null, \"componentDidCatch Lifecycle Method\"), mdx(\"p\", null, \"The first method parameter is the actual error thrown. The second parameter is an object with a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"componentStack\"), \" property containing the component stack trace information. The \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"componentDidCatch()\"), \" lifecycle method works similar to JavaScript\\u2019s \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"catch {}\"), \" but for components. An Error Boundary cannot catch an error within itself. The error will propagate to the closest Error Boundary above it. Sound familiar?\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hint: JavaScript \", mdx(\"code\", _extends({\n    parentName: \"em\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"catch {}\")), \" block.\"), mdx(\"h3\", null, \"Why do I need componentDidCatch?\"), mdx(\"p\", null, \"Prior to React 16 Error Boundaries, errors inside components would cause unrecoverable cryptic errors. There was not a great way to handle these errors within the components.\"), mdx(\"p\", null, \"React 16 Error Boundaries to the rescue!\"), mdx(\"h3\", null, \"How do I use Error Boundaries?\"), mdx(\"p\", null, \"Check out the CodeSandbox Error Boundaries example below. I\\u2019d highly recommend forking the sandbox and adding more Error Boundaries and components to see them in action.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesandbox.io/s/6vyp7rjon3\"\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://codesandbox.io/static/img/play-codesandbox.svg\",\n    \"alt\": \"Edit componentdidcatch\"\n  })))), mdx(\"h3\", null, \"Benefits\"), mdx(\"p\", null, \"Declarative vs Imperative. One of the beauties of React is it\\u2019s Declarative code style. A component itself declares what should be rendered. Error Boundaries follow the Declarative nature of React. You no longer need to resort to imperative code solutions such as \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"try/catch\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"if/else\"), \" for conditional rendering of a UI based on errors.\"), mdx(\"p\", null, \"Expected Behavior. Error Boundaries will propagate an error to the closest Error Boundary regardless how deep in the tree the error occurs.\"), mdx(\"p\", null, \"Reusability. You can write one Error Boundary Component and re-use it throughout your app.\"), mdx(\"p\", null, \"Component All The Things\"), mdx(\"h3\", null, \"When should I use Error Boundaries?\"), mdx(\"p\", null, \"\\u201CIn practice, most of the time you\\u2019ll want to declare an error boundary component once and use it throughout your application.\\u201D -\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html#introducing-error-boundaries\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Dan Abramov\"))), mdx(\"p\", null, \"You can wrap top level route components, you might also wrap components that might contain obscure code. Its up to you how to best handle protecting against application crashes.\"), mdx(\"p\", null, \"Once React 16 is released more standards and best practices with Error Boundaries will appear. Error Boundaries will encourage JavaScript error reporting services that can be triggered within the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"componentDidCatch()\"), \" lifecycle method in Production environments.\"), mdx(\"p\", null, \"For more details check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Error Handling in React 16\")), \" by Dan Abramov.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"2 Minutes to Learn React 16's componentDidCatch Lifecycle Method","date":"September 12, 2017","featuredImage":null}}},"pageContext":{"slug":"/component-did-catch/","previous":{"fields":{"slug":"/flow-setup/"},"frontmatter":{"title":"Configure ESLint, Prettier, and Flow in VS Code for React Development"}},"next":{"fields":{"slug":"/ts-setup/"},"frontmatter":{"title":"Configure TypeScript, TSLint, and Prettier in VS Code for React Native Development"}}}}}