{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/src/ts-setup/","result":{"data":{"site":{"siteMetadata":{"title":"Sean Groff | Web Developer creating awesome content for JavaScript and React","social":[{"name":"Twitter","url":"https://twitter.com/_SeanGroff"},{"name":"GitHub","url":"https://github.com/seangroff"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"94042d8c-8b17-52cc-b5cf-2bac70fcd2d8","excerpt":"Introduction This short guide will provide you a consistent and reusable development workflow for new or existing  React Native  projectsâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Configure TypeScript, TSLint, and Prettier in VS Code for React Native Development\",\n  \"date\": \"2018-07-13\",\n  \"categories\": \"react\",\n  \"tags\": [\"react\", \"prettier\", \"typescript\", \"eslint\", \"vscode\", \"react-native\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"introduction\"\n  }, \"Introduction\"), mdx(\"p\", null, \"This short guide will provide you a consistent and reusable development workflow for new or existing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"React Native\")), \" projects. The more effort you put into writing quality code, the less time you spend on debugging. You can increase your code quality and reduce the time spent on debugging with a consistent development workflow. In this guide I will show you how to configure VS Code to handle your code formatting, linting, and type checking.\"), mdx(\"p\", null, \"Testing is outside the scope of this article but highly recommended.\"), mdx(\"p\", null, \"How to use TypeScript is also outside the scope of this article.\"), mdx(\"h3\", {\n    \"id\": \"getting-started\"\n  }, \"Getting Started\"), mdx(\"p\", null, \"For this post we are going to start from a newly created project. You can skip ahead to the TypeScript setup if you\\u2019re working on an existing project. Let\\u2019s initialize our React Native app! For this article we\\u2019ll use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/getting-started.html#the-react-native-cli\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"React Native CLI\")), mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ react-native init SweetApp && cd SweetApp\")), mdx(\"p\", null, \"Open the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"SweetApp\")), \" project with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"VS Code\")), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ code .\")), mdx(\"p\", null, \"Once you have \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"VS Code\")), \" open, click the Extensions button in the Activity Bar.\"), mdx(\"p\", null, \"Install the following extensions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Prettier Code Formatter\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=eg2.tslint\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"TSLint\")))), mdx(\"h3\", {\n    \"id\": \"typescript-setup\"\n  }, \"TypeScript Setup\"), mdx(\"p\", null, \"First let\\u2019s install and setup TypeScript for our React Native app by entering the following commands in the terminal. (I use the Yarn package manager)\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ yarn add --dev typescript react-native-typescript-transformer @types/react @types/react-native\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ yarn tsc --init --pretty --jsx react\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ touch rn-cli.config.js\")), mdx(\"p\", null, \"Here\\u2019s what we just did:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"installed TypeScript to our project as a dev dependency\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"installed \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/ds300/react-native-typescript-transformer\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"React Native TypeScript Transformer\")), \" to our project as a dev dependency to seamlessly use TypeScript with react-native\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"initialize an empty TypeScript config file, which we\\u2019ll configure next\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"create an empty React Native TypeScript Transformer config file, which we\\u2019ll configure shortly\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"install \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/DefinitelyTyped/DefinitelyTyped\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"typings\")), \" for React and React Native allowing TypeScript to type check our React Native code\")), mdx(\"h3\", {\n    \"id\": \"configure-typescript\"\n  }, \"Configure TypeScript\"), mdx(\"p\", null, \"Here are the settings I enabled/disabled and I recommend you do as well to get started. As you gain more experience and become comfortable with TypeScript you\\u2019ll tweak this file more to your preferences.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For the option you want to enable or disable, simply comment or uncomment the line of code.\")), mdx(\"p\", null, \"In the Module Resolution Options section I enabled the following three options:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"allowSyntheticDefaultImports\\\": true,\\n\\\"esModuleInterop\\\": true,\\n\\\"resolveJsonModule\\\": true\\n\")), mdx(\"p\", null, \"In the Strict Type-Checking Options and Addition Checks sections make the necessary configuration changes to match the code below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"noImplicitAny\\\": true,\\n\\\"strictFunctionTypes\\\": true,\\n\\\"noImplicitThis\\\": true,\\n\\\"alwaysStrict\\\": true\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Note\")), \": I also prefer to change the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"target\"), \" property to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u201CES2015\\u201D\"), \" to use async/await without a Promise declaration.\"), mdx(\"h3\", {\n    \"id\": \"configure-the-react-native-typescript-transformer\"\n  }, \"Configure the React Native TypeScript Transformer\"), mdx(\"p\", null, \"Open the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rn-cli.config.js\"), \" file we created earlier and copy paste the following code, then save and close this file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n  getTransformModulePath() {\\n    return require.resolve('react-native-typescript-transformer')\\n  },\\n  getSourceExts() {\\n    return ['ts', 'tsx']\\n  },\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"typescript-migration\"\n  }, \"TypeScript Migration\"), mdx(\"p\", null, \"Rename the generated \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"App.js f\"), \"ile in our project to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"App.tsx\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" needs to use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".js\"), \" extension.\")), mdx(\"p\", null, \"All new files containing JSX should use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".tsx\"), \" extension and the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".ts\"), \" extension for plain JavaScript files.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Now is a great time to go through your existing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".tsx\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".ts\"), \" files and fix any TypeScript errors.\")), mdx(\"h3\", {\n    \"id\": \"tslint-installation-and-setup\"\n  }, \"TSLint Installation and Setup\"), mdx(\"p\", null, \"First, let\\u2019s install \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TSLint\"), \" and some \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TSLint\"), \" extensions I personally prefer for React Native development.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ yarn add --dev tslint tslint-config-prettier tslint-config-standard tslint-react\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"added \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"tslint-config-prettier\"), \" so \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"tslint\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"prettier\"), \" won\\u2019t fight over code formatting rules.\")), mdx(\"p\", null, \"You should now see a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"tslint.json\"), \" file in your project.\"), mdx(\"p\", null, \"Open the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"tslint.json\"), \" file and configure it like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"defaultSeverity\\\": \\\"error\\\",\\n  \\\"extends\\\": [\\n    \\\"tslint:recommended\\\",\\n    \\\"tslint-config-standard\\\",\\n    \\\"tslint-react\\\",\\n    \\\"tslint-config-prettier\\\"\\n  ],\\n  \\\"jsRules\\\": {},\\n  \\\"rules\\\": {\\n    \\\"ordered-imports\\\": false,\\n    \\\"object-literal-sort-keys\\\": false,\\n    \\\"member-ordering\\\": false,\\n    \\\"jsx-no-lambda\\\": false,\\n    \\\"jsx-boolean-value\\\": false\\n  },\\n  \\\"rulesDirectory\\\": []\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rules\"), \" section is my personal preferences. You\\u2019re free to roll your own rules.\"), mdx(\"h3\", {\n    \"id\": \"lint-your-code\"\n  }, \"Lint your Code\"), mdx(\"p\", null, \"From the root of your project open the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file and add the following \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"npm lint script\"), \" to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"scripts\"), \" section\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"scripts\\\": {\\n  \\\"start\\\": \\\"node node_modules/react-native/local-cli/cli.js start\\\",\\n  \\\"test\\\": \\\"jest\\\",\\n  \\\"lint\\\": \\\"tslint 'src/**/*.{ts,tsx}'\\\"\\n}\\n\")), mdx(\"p\", null, \"Now from your terminal you can run \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"yarn lint.\"), \" You know you enjoy fixing linter errors!\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ yarn lint\")), mdx(\"h3\", {\n    \"id\": \"prettier-setup\"\n  }, \"Prettier Setup\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/prettier/prettier\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Prettier\")), \" will auto-format your code based on it\\u2019s rules.\"), mdx(\"p\", null, \"Prettier is amazing. If you\\u2019ve never used it, it\\u2019s like watching TV on an HDTV then trying to go back to watch TV on a non-HDTV. Once you use Prettier you\\u2019ll never go back to formatting your own code again.\"), mdx(\"p\", null, \"Let\\u2019s install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/prettier-eslint\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"prettier\")), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ yarn add --dev prettier\")), mdx(\"p\", null, \"Next, we want \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"VS Code\")), \" to format our code using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/prettier/prettier\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Prettier\")), \" extension after saving a file.\"), mdx(\"p\", null, \"Press \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CMD + ,\"), \" if you\\u2019re on a Mac to open your \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/docs/getstarted/settings\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"VS Code Workspace Settings\")), \" then add the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"editor.formatOnSave\\\": true,\\n\\\"javascript.format.enable\\\": false\\n\")), mdx(\"p\", null, \"Now let\\u2019s create a prettier config file that will contain your Prettier code formatting preferences.\"), mdx(\"p\", null, \"From the root of your project create a file name \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".prettierrc\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ touch .prettierrc\")), mdx(\"p\", null, \"Use my prettier rules or roll your own based on your preferences. Here are my Prettier preferences. Yes, i\\u2019m on team no semi-colons!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"semi\\\": false,\\n\\\"singleQuote\\\": true,\\n\\\"trailingComma\\\": \\\"es5\\\"\\n\")), mdx(\"h3\", {\n    \"id\": \"prettier-code-formatter\"\n  }, \"Prettier Code Formatter\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/prettier/prettier\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Prettier\")), \" will auto-format your code based on it\\u2019s rules whenever you save a file.\"), mdx(\"p\", null, \"Open the sample \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"app.js\"), \" file and add an array of numbers. Save the array to a variable called test. Mess with the formatting of the numbers in the array.\"), mdx(\"p\", null, \"Now save the file and watch the magic of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/prettier/prettier\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Prettier\")), \" take effect!\"), mdx(\"p\", null, \"The test array should now be formatted correctly!\"), mdx(\"p\", null, \"\\uD83C\\uDF89 You\\u2019re all set\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"!\"), \" \\uD83C\\uDF89\"), mdx(\"p\", null, \"Hopefully this guide saves you a lot of time and makes for a great reference guide now and in the future.\"), mdx(\"p\", null, \"Happy coding! \\uD83D\\uDE00\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/src/ts-setup/","title":"Configure TypeScript, TSLint, and Prettier in VS Code for React Native Development","tags":["react","prettier","typescript","eslint","vscode","react-native"],"keywords":[],"date":"July 13, 2018"},"previous":{"__typename":"MdxBlogPost","id":"c656cb54-12f5-59c2-9d66-b1cef72ce338","excerpt":"What are Error Boundaries? \"Error boundaries are React components that  catch JavaScript errors anywhere in their child component tree, logâ€¦","slug":"/src/component-did-catch/","title":"2 Minutes to Learn React 16's componentDidCatch Lifecycle Method","date":"September 12, 2017"},"next":{"__typename":"MdxBlogPost","id":"93e52df4-b98c-5746-b54e-e329cfe76880","excerpt":"What are Refs? Refs? Refs in React 16.3? If you're still a little green with React it's not unusual to have never heard of refs. I completedâ€¦","slug":"/src/react-refs/","title":"Introduction to Refs in React 16.3","date":"August 07, 2018"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"94042d8c-8b17-52cc-b5cf-2bac70fcd2d8","previousId":"c656cb54-12f5-59c2-9d66-b1cef72ce338","nextId":"93e52df4-b98c-5746-b54e-e329cfe76880"}}}