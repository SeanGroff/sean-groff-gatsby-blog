{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/src/react-refs/","result":{"data":{"site":{"siteMetadata":{"title":"Sean Groff | Web Developer creating awesome content for JavaScript and React","social":[{"name":"Twitter","url":"https://twitter.com/_SeanGroff"},{"name":"GitHub","url":"https://github.com/seangroff"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"93e52df4-b98c-5746-b54e-e329cfe76880","excerpt":"What are Refs? Refs? Refs in React 16.3? If you're still a little green with React it's not unusual to have never heard of refs. I completedâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introduction to Refs in React 16.3\",\n  \"date\": \"2018-08-07\",\n  \"categories\": \"react\",\n  \"tags\": [\"react\", \"js\", \"javascript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"what-are-refs\"\n  }, \"What are Refs?\"), mdx(\"p\", null, \"Refs? Refs in React 16.3? If you\\u2019re still a little green with React it\\u2019s not unusual to have never heard of refs. I completed a couple projects at work before I was introduced to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"refs\"), \". In this article I will briefly introduce \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"refs\"), \" and why they aren\\u2019t typically taught when first learning React. I will spend the rest of this article introducing you to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createRef() API\"), \" that was released in React version 16.3.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"If you know what refs are in React feel free to skip ahead to the Refs in React section.\")), mdx(\"h3\", {\n    \"id\": \"why-refs\"\n  }, \"Why Refs?\"), mdx(\"p\", null, \"You can do just about everything you need in React using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"props\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"state\"), \". So why do you need \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"refs\"), \"? One common use case is managing focus on a text input element.\"), mdx(\"p\", null, \"Let\\u2019s say I want the text element to focus after pressing enter to submit some data from a form. You\\u2019ve likely created a stateful class component with a custom \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"handleSubmit()\"), \" lifecycle method. Your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"handleSubmit()\"), \" lifecycle method likely grabs the state property that was updated via user input from the text input element and submits the data.\"), mdx(\"p\", null, \"Here\\u2019s where the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ref\"), \" comes in. From the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"handleSubmit()\"), \" lifecycle method, how do we set the text input element to be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"focused\"), \" so the user can easily enter more data? How do we \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"REF\"), \"erence the text input element to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"focus\"), \"?\"), mdx(\"h3\", {\n    \"id\": \"refs\"\n  }, \"Refs\"), mdx(\"p\", null, \"Prior to React v16.3 the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"callback ref\"), \" was the preferred way to create and use refs. Callback refs are fine. I prefer the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createRef()\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"API\"), \" to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"callback ref\"), \" for a couple reasons.\"), mdx(\"p\", null, \"If you use an inline callback function for your ref a new function is created for every re-render. This is the case with any arrow function inside the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"render\"), \" method.\"), mdx(\"p\", null, \"The inline callback function will also be called twice during updates. The first call produces a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"null\"), \" value before the element is returned on the second call. To see this in action checkout the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesandbox.io/s/zl84j0m52l\"\n  }), \"Callback Ref Code Sandbox Example\")), mdx(\"h3\", {\n    \"id\": \"createref-api-in-react-v163\"\n  }, \"CreateRef API in React v16.3\"), mdx(\"p\", null, \"You can create and use a ref in three easy steps using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createRef API\"), \".\"), mdx(\"h3\", {\n    \"id\": \"ref-creation\"\n  }, \"Ref Creation\"), mdx(\"p\", null, \"In your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"class constructor method\"), \" create a class property and assign \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"React.createRef()\"), \" to it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class RefExample extends React.Component {\\n  constructor(props) {\\n    super(props)\\n\\n    // create a ref to store the textInput element\\n    this.inputNewItem = React.createRef()\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"add-ref-to-dom-element\"\n  }, \"Add Ref to DOM Element\"), mdx(\"p\", null, \"Tell React to associate the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"inputNewItem\"), \" we created in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"constructor\"), \" with the input ref.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"render() {\\n  <form onSubmit={this.handleSubmit}>\\n    <input type=\\\"text\\\" ref={this.inputNewItem} />\\n  </form>\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"use-the-ref\"\n  }, \"Use the Ref!\"), mdx(\"p\", null, \"Inside our \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"handleSubmit\"), \" method let\\u2019s tell React to have the input focused.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"handleSubmit = () => {\\n  // omitting form submission code\\n\\n  this.inputNewItem.current.focus()\\n}\\n\")), mdx(\"p\", null, \"From the React Docs\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"React will assign the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"current\"), \" property with the DOM element when the component mounts, and assign it back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" when it unmounts. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \" updates happen before \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidMount\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidUpdate\"), \" lifecycle hooks.\")), mdx(\"h3\", {\n    \"id\": \"refs-in-typescript\"\n  }, \"Refs in TypeScript\"), mdx(\"p\", null, \"Here\\u2019s how a ref using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createRef API\"), \" is defined in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TypeScript.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"class RefExample extends React.Component {\\n  private inputNewItem: React.RefObject<TextInput> = React.createRef()\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I prefer not using a class constructor\")), mdx(\"p\", null, \"I find Refs created using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createRef API\"), \" to be more explicit without the cons I stated above using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"callback refs\"), \".\"), mdx(\"p\", null, \"I wrote this blog post so you can start using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createRef API\"), \" right away. If i\\u2019m missing something you\\u2019d like included in this blog post leave a comment or reach out to me on Twitter @\", \"_\", \"SeanGroff\"), mdx(\"p\", null, \"Enjoy!\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/src/react-refs/","title":"Introduction to Refs in React 16.3","tags":["react","js","javascript"],"keywords":[],"date":"August 07, 2018"},"previous":{"__typename":"MdxBlogPost","id":"94042d8c-8b17-52cc-b5cf-2bac70fcd2d8","excerpt":"Introduction This short guide will provide you a consistent and reusable development workflow for new or existing  React Native  projectsâ€¦","slug":"/src/ts-setup/","title":"Configure TypeScript, TSLint, and Prettier in VS Code for React Native Development","date":"July 13, 2018"},"next":{"__typename":"MdxBlogPost","id":"d8bc964a-e9d1-5865-893e-b7aff488d0b8","excerpt":"What are Animations in React Native? Animation  can be defined as manipulating images or objects to appear as moving images or objectsâ€¦","slug":"/src/rn-animations/","title":"Get Started with React Native Animations","date":"August 29, 2018"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"93e52df4-b98c-5746-b54e-e329cfe76880","previousId":"94042d8c-8b17-52cc-b5cf-2bac70fcd2d8","nextId":"d8bc964a-e9d1-5865-893e-b7aff488d0b8"}}}